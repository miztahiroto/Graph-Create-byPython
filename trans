import os
import datetime
import time
from PIL import ImageGrab, Image
import sys
import cv2
import pyocr
import pyocr.builders

import PySimpleGUI as sg
import configparser
import requests
import pyperclip
import json

sg.theme('LightGray1')


# クリップボード内の情報を取得する
#clipboard_image = ImageGrab.grabclipboard()


"""MAIN_LAYOUT"""
def main_win():
    frame1 = sg.Frame('',
        [
            [sg.Text('読み取り画像を選択')],
    #        [sg.Text('(クリップボード内の画像を使用する場合はUpload不要)')],
            [sg.FileBrowse('Upload', key='inputFilePath',target='input1'), sg.InputText(key='input1',default_text=''), sg.Button('読み取り', key='upload')],
            [sg.Text('読み取り結果')],
            [sg.Multiline(size=(100,20), key='page1')],
            [sg.Button('結果コピー', key='before'), sg.Text('', key='copy1')]

        ] , size=(500, 500) #幅,高さ
    )
    #フレーム2(中はからっぽ、フレームサイズだけ指定)
    frame2 = sg.Frame('',
        [
            [sg.Button('DeepLで翻訳', key='')],  # key='deepl' プロキシエラーのため退避
            [sg.Text('翻訳結果')],
            [sg.Multiline('', size=(100, 23), key='page2')],
            [sg.Button('結果コピー', key='after'), sg.Text('', key='copy2')]
        ] , size=(500, 500) #幅,高さ
    )

    #全体レイアウト
    layout_main= [
        [frame1,frame2]
    ]
    

    #表示
    return sg.Window('文字認識アプリ試作', layout_main, resizable=True)


"""SUB_LAYOUT"""
def sub_win():
    frame3 = sg.Frame('',
        [
            [sg.Text('情シIDを入力してください', key='jousi')],
            [sg.InputText(key='jo',size=(23))],
            [sg.Button('OK', key='ok')]
        ] , 
    )

    #全体レイアウト
    layout_sub= [
        [frame3]
    ]

    #表示
    return sg.Window('認証', layout_sub, resizable=True)

"""最初に表示するウィンドウ"""
window=sub_win()

#GUI表示実行部分
while True:
    event, value = window.read()
    
    if event is None:
        break
    
    if event == 'ok' and value['jo']=='':
        sg.popup("正しい情シIDを入力してください")
        
    if event == 'ok' and value['jo']:
        window.close()
        window=main_win()
        ID=value['jo']
#        print(value['jo'])

            
    if event == 'upload':
        
        # 保存先ディレクトリの指定
        directory = "C:/Users/"+ID+"/Pictures"
#        print(directory)
        
        # ファイルネームの指定
        file_name = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        file_name = os.path.join(directory, "{}.jpg".format(file_name))

        #画像処理
        up_image=value['input1']
        im2=cv2.imread(up_image)
        im2=cv2.resize(im2,dsize=None,fx=2.5,fy=2.5)  #画像拡大
        im2=cv2.cvtColor(im2, cv2.COLOR_BGR2GRAY)  #gray
#        im2=cv2.Canny(im2, threshold1=10, threshold2=200)  #edge
        up_image=datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        up_image=os.path.join(directory,"{}.jpg".format(up_image))
        cv2.imwrite(up_image,im2)
#        print(im2)
#        print(up_image)

        """以下文字認識"""

        # 1.インストール済みのTesseractのパスを通す
        path_tesseract = "C:\Program Files\Tesseract-OCR"
        if path_tesseract not in os.environ["PATH"].split(os.pathsep):
            os.environ["PATH"] += os.pathsep + path_tesseract

        # 2.OCRエンジンの取得
        tools = pyocr.get_available_tools()
        tool = tools[0]

        # 3.原稿画像の読み込み
        img_org = Image.open(up_image)

        # 4.ＯＣＲ実行
        builder = pyocr.builders.TextBuilder()
        result = tool.image_to_string(img_org, lang="jpn", builder=builder)

        #print(result)
        window["page1"].update(result)
        
        #処理後の画像を消去
#        time.sleep(5)
        os.remove(up_image)
        
        
    if event == 'deepl':
        API_KEY="xxxxxxxxxx:fx" #使用時は固有のAPIキーを付ける
            # URLクエリに仕込むパラメータの辞書作成
        params = {
            "auth_key": API_KEY,
            "text": value['page1'],
            "source_lang": 'EN', # 入力テキストの言語
            "target_lang": 'JA'  # 出力テキストの言語
        }
        # パラメータと一緒にPOSTする
        request = requests.post("https://api-free.deepl.com/v2/translate", data=params)
        translate = request.json()
#        print(translate["translations"][0]["text"])
        window["page2"].update(translate["translations"][0]["text"])
#        print(result)

      

    if event == 'before':
        data1=value['page1']
        pyperclip.copy(data1)
        getdata1 = pyperclip.paste()
        window["copy1"].update("コピーしました")

    if event == 'after':
        data2=value['page2']
        pyperclip.copy(data2)
        getdata2 = pyperclip.paste()
        window["copy2"].update("コピーしました")
   
#print(up_image)   
#print(event,value)


        
        


window.close()


