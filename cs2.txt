using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Drawing;
using System.Drawing.Imaging;
using OpenCvSharp;
//using OpenCvSharp.WpfExtensions;
using Microsoft.Win32;  // オープンファイル・ダイアログボックスで使用する。
using System.IO;        // ファイル操作で使用する。
using System.Windows.Forms;
using System.Windows.Threading;//タイマー用



namespace WpfApp2
{
    /// <summary>
    /// MainWindow.xaml の相互作用ロジック
    /// </summary>
    public partial class MainWindow : System.Windows.Window
    {
        //クリックされているか判定用
        [System.Runtime.InteropServices.DllImport("user32.dll")] private static extern short GetKeyState(int nVirtkey);

        WriteableBitmap m_processedBitmap = null;
        //        BitmapImage m_srcBitmap = null;

        public MainWindow()
        {
            InitializeComponent();
            //           test.Source = new BitmapImage(new Uri("C:/Users/RD56285/Documents/1_Dev/H2O/研修/C#演習/自由製作/WpfApp2/WpfApp2/test.png", UriKind.Relative));
            //           EnableDragDrop(image);

            /*
            //タイマーの設定、一定時間ごとにマウスカーソルの状態を見る
            var timer = new DispatcherTimer(DispatcherPriority.Normal);
            //timer.Interval = new TimeSpan(100000);//ナノ秒
            timer.Interval = new TimeSpan(0, 0, 0, 0, 10);//10ミリ秒毎（0.01秒毎）
            timer.Start();
//            timer.Tick += test_MouseDown;
            */

        }

        /*
        //タイマーのTickイベント時
        private void Timer_Tick(object sender, EventArgs e)
        {
            System.Drawing.Point p = System.Windows.Forms.Cursor.Position;//マウスカーソル位置取得
            System.Windows.Media.Color c = GetPixelColor(p.X, p.Y);//マウスカーソル位置の色取得
            var b = new SolidColorBrush(c);
            //MyTextBlockColor.Background = b;
            //MyTextBlockColor.Text = c.ToString();
            //           MyTextBlockCursorLocation.Text = $"マウスの位置 = {System.Windows.Forms.Cursor.Position}";

            if (IsClickDown())
            {

                MyTextBlockGetColor.Background = b;
                //                MyTextBlockGetColor.Text = c.ToString();
                System.Drawing.Color ccolor = ColorTranslator.FromHtml(c.ToString());
                MyTextBlockGetColor.Text = string.Format("R:{0:d} G:{1:d} B:{2:d}", ccolor.R, ccolor.G, ccolor.B);

            }
        }
        */

        //クリック判定
        private bool IsClickDown()
        {
            //マウス左ボタン(0x01)の状態、押されていたらマイナス値(-127)、なかったら0
            return GetKeyState(0x01) < 0;
        }

        //画面上の指定座標の1ピクセルの色を返す
        private System.Windows.Media.Color GetPixelColor(int x, int y)
        {
            //1x1サイズのBitmap作成
            using (System.Drawing.Bitmap bitmap = new System.Drawing.Bitmap(
                1, 1, System.Drawing.Imaging.PixelFormat.Format32bppArgb))
            {
                using (var bmpGraphics = System.Drawing.Graphics.FromImage(bitmap))
                {
                    //画面をキャプチャして指定座標の1ピクセルだけBitmapにコピー
                    bmpGraphics.CopyFromScreen(x, y, 0, 0, new System.Drawing.Size(1, 1));
                    //ピクセルの色取得
                    System.Drawing.Color color = bitmap.GetPixel(0, 0);
                    //WPF用にSystem.Windows.Media.Colorに変換して返す
                    return System.Windows.Media.Color.FromArgb(color.A, color.R, color.G, color.B);
                }
            }
        }


        private void TextBox_TextChanged(object sender, TextChangedEventArgs e)
        {

        }





        //画像選択
        private void Button_Click_2(object sender, RoutedEventArgs e)
        {
            // オープンファイル・ダイアログボックスを設定します。
            Microsoft.Win32.OpenFileDialog dlg = new Microsoft.Win32.OpenFileDialog();
            dlg.Filter = "画像|*.jpg;*.jpeg;*.png;*.bmp";  // 左記拡張子のみフォローする。

            // ファイルを選択する
            if (dlg.ShowDialog() != true)
            {
                return;
            }

            // 選択したファイルをメモリにコピーする
            MemoryStream ms = new MemoryStream();
            using (FileStream fs = new FileStream(dlg.FileName, FileMode.Open))

            {
                fs.CopyTo(ms);      // FileStreamの内容をメモリストリームにコピーします。
            }
            file.Text = dlg.FileName;
            //           System.Windows.MessageBox.Show(file.Text);

            // ストリームの位置をリセット
            ms.Seek(0, SeekOrigin.Begin);

            // ストリームをもとにBitmapImageを作成
            BitmapImage bmp = new BitmapImage();
            bmp.BeginInit();            // BitmapImage の初期化の開始を通知します。
            bmp.StreamSource = ms;      // BitmapImage のストリーム ソースを設定します。
            bmp.EndInit();              // BitmapImage の初期化の終了を通知します。

            // BitmapImageをSourceに指定して画面に表示する
            m_processedBitmap = new WriteableBitmap(bmp);
            test.Source = m_processedBitmap;


        }

        //画像内のクリックした点の色取得
        private void test_MouseDown(object sender, MouseButtonEventArgs e)
        {
            System.Drawing.Point p = System.Windows.Forms.Cursor.Position;//マウスカーソル位置取得
            System.Windows.Media.Color c = GetPixelColor(p.X, p.Y);//マウスカーソル位置の色取得
            var r = new SolidColorBrush(c);
            var g = new SolidColorBrush(c);
            var b = new SolidColorBrush(c);
            //MyTextBlockColor.Background = b;
            //MyTextBlockColor.Text = c.ToString();
            //           MyTextBlockCursorLocation.Text = $"マウスの位置 = {System.Windows.Forms.Cursor.Position}";

            if (IsClickDown())
            {

                MyTextBlockGetColor_R.Background = r;
                MyTextBlockGetColor_G.Background = g;
                MyTextBlockGetColor_B.Background = b;
                //                MyTextBlockGetColor.Text = c.ToString();
                System.Drawing.Color ccolor = ColorTranslator.FromHtml(c.ToString());
                MyTextBlockGetColor.Text = string.Format("{0:d},{1:d},{2:d}", ccolor.R, ccolor.G, ccolor.B);
                //MyTextBlockGetColor_R.Text = string.Format("{0:d}", ccolor.R);
                //MyTextBlockGetColor_G.Text = string.Format("{1:d}", ccolor.G);
                //MyTextBlockGetColor_B.Text = string.Format("{2:d}", ccolor.B);
            }
        }

        //画像処理
        private void Button_Click_3(object sender, RoutedEventArgs e)
        {
            WriteableBitmap m_processedBitmap_rev = m_processedBitmap;

            
            if (m_processedBitmap_rev == null)
            {
                System.Windows.MessageBox.Show("画像選択からやり直してください");
                return;
            }

           
            Bitmap bitmap = new Bitmap(file.Text);
 //           System.Windows.MessageBox.Show(file.Text);
            int w = bitmap.Width;
            int h = bitmap.Height;
            /*
           for (int x = 0; x < w; x++)
           {
               for (int y = 0; y < h; y++)
               {
                   System.Drawing.Color pixel = bitmap.GetPixel(x, y);
                   // ARGB
                   byte R = pixel.R; // A,G,Bも同様
                   byte G = pixel.G;
                   byte B = pixel.B;

                   // HSB
                   //float h = pixel.GetHue(),
                   //      s = pixel.GetSaturation(),
                   //      b = pixel.GetBrightness();
                   // SetPixelで書き込み
                   bitmap.SetPixel(x, y, System.Drawing.Color.FromArgb(R, G, B));
                   IntPtr hbitmap = bitmap.GetHbitmap();
                   test2.Source = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(hbitmap, IntPtr.Zero, Int32Rect.Empty, BitmapSizeOptions.FromEmptyOptions());
               }
           }
           bitmap.Save("save.png");
           */
            byte[,] data = new byte[w, h];

            //int[] R = new int[40];
            //int[] G = new int[40];
            //int[] B = new int[40];

            /*
            //ColorMap colorMap = new ColorMap();
            ColorMap[] cm = new ColorMap[]{
                new ColorMap(),
            };

            cm[0].OldColor = System.Drawing.Color.White;
            cm[0].NewColor = System.Drawing.Color.Yellow;

            using (Bitmap imggg = new Bitmap(file.Text))
            using (ImageAttributes ia = new ImageAttributes())
            {
                ia.SetRemapTable(cm);

                ab.Graphics.DrawImage(imggg, new System.Drawing.Rectangle(0, 0, imggg.Width, imggg.Height),
                    0, 0, imggg.Width, imggg.Height, GraphicsUnit.Pixel, ia);
                IntPtr hbitmap = imggg.GetHbitmap();
                test2.Source = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(hbitmap, IntPtr.Zero, Int32Rect.Empty, BitmapSizeOptions.FromEmptyOptions());
            }
            */
            

            /*
            Bitmap canvas = new Bitmap(w, h);
            Graphics g = Graphics.FromImage(canvas);

            System.Drawing.Imaging.ColorMap[] cms =
    new System.Drawing.Imaging.ColorMap[]
        {new System.Drawing.Imaging.ColorMap(),
        new System.Drawing.Imaging.ColorMap()};

            
            Bitmap img = new Bitmap(file.Text);

            //青を黒に変換する
            cms[0].OldColor = System.Drawing.Color.Blue;
            cms[0].NewColor = System.Drawing.Color.Black;
            //黒を白に変換する
            cms[1].OldColor = System.Drawing.Color.White;
            cms[1].NewColor = System.Drawing.Color.Blue;

            //ImageAttributesオブジェクトの作成
            System.Drawing.Imaging.ImageAttributes ia =
                new System.Drawing.Imaging.ImageAttributes();
            //ColorMapを設定
            ia.SetRemapTable(cms);

            //画像を普通に描画
 //           g.DrawImage(bitmap, 0, 0);

            //色を変換して画像を描画
            g.DrawImage(img, new System.Drawing.Rectangle(canvas.Width + 10, 0, canvas.Width, canvas.Height),
                0, 0, canvas.Width, canvas.Height, GraphicsUnit.Pixel, ia);
            */

//            IntPtr hbitmap = img.GetHbitmap();
 //           test2.Source = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(hbitmap, IntPtr.Zero, Int32Rect.Empty, BitmapSizeOptions.FromEmptyOptions());
 //           var test2= new System.Windows.Controls.Image();
 //           test2.Source = handle;
            //for (int i = -20; i < +20; i++)
            //{
            //    colorMap.OldColor = System.Drawing.Color.FromArgb(169 + i, 30 + i, 57 + i);  // opaque red
            //    colorMap.NewColor = System.Drawing.Color.FromArgb(255, 0, 0, 255);  // opaque blue

            //if (> 255)
            //{
            //    = 255;
            //}
            //}
            //           System.Windows.MessageBox.Show(MyTextBlockGetColor.Text);

            // bitmapクラスの画像pixel値を配列に挿入
            for (int i = 0; i < h; i++)
            {
                for (int j = 0; j < w; j++)
                {
                    //                   System.Drawing.Color ccolor = ColorTranslator.FromHtml(c.ToString());
                    ////                   MyTextBlockGetColor.Text = string.Format("R:{0:d} G:{1:d} B:{2:d}", ccolor.R, ccolor.G, ccolor.B);
                    //                   for (int a = (ccolor.R-20); a < h; a++) { 


                    //}

                    // グレイスケール変換処理
                    data[j, i] = (byte)((bitmap.GetPixel(j, i).R + bitmap.GetPixel(j, i).B + bitmap.GetPixel(j, i).G)/3 );
                    bitmap.SetPixel(j, i, System.Drawing.Color.FromArgb(data[j, i], data[j, i], data[j, i]));

                    //int r = int.Parse(MyTextBlockGetColor_R.Text);
                    //int g = int.Parse(MyTextBlockGetColor_G.Text);
                    //int b = int.Parse(MyTextBlockGetColor_B.Text);

                    //int r = 230;
                    //int g = 230;
                    //int b = 230;

                    //for (int a = (r - 20); a < (r + 20); a++) 
                    //{
                    //    for (int bb = (g - 20); bb < (g + 20); bb++)
                    //    {
                    //        for (int c = (b - 20); c < (b + 20); c++)
                    //        {
                    //            data[j, i] = 255;


                    //        }
                    //    }
                    //}
                   // bitmap.SetPixel(j, i, System.Drawing.Color.FromArgb(data[j, i], data[j, i], data[j, i]));
                }
            }
 //           System.Drawing.Color pClr = System.Drawing.Color.FromArgb(200, 200, 200);


            // 表示
            IntPtr hbitmap = bitmap.GetHbitmap();
            test2.Source = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(hbitmap, IntPtr.Zero, Int32Rect.Empty, BitmapSizeOptions.FromEmptyOptions());
            //           DeleteObject(hbitmap);


        }

        //「クリップボードにコピー」のボタンをクリックしたとき
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            System.Windows.Clipboard.SetData(System.Windows.DataFormats.Bitmap, m_processedBitmap);
            System.Windows.IDataObject data = System.Windows.Clipboard.GetDataObject();

            //値がクリップボードに格納できないときの例外処理

        }

        //「保存」のボタンをクリックしたとき
        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            //画像を作成する
            ImageSource img = test2.Source;
            BitmapSource bmp = (BitmapSource)img;
            // BitmapSourceを保存する
            using (Stream stream = new FileStream("C:/Users/RD56285/Pictures/test.png", FileMode.Create))
            {
                PngBitmapEncoder encoder = new PngBitmapEncoder();
                encoder.Frames.Add(BitmapFrame.Create(bmp));
                encoder.Save(stream);
            }

            /*
            // SaveFileDialogを表示
            Microsoft.Win32.SaveFileDialog saveFileDialog = new Microsoft.Win32.SaveFileDialog();
            saveFileDialog.Title = "ファイルを保存する"; // ダイアログタイトル
            saveFileDialog.InitialDirectory = @"C:\Users\RD56285\Desktop";    // 初期のディレクトリ
            saveFileDialog.FileName = @"aa.png";       // デフォルトファイル名
            saveFileDialog.ShowDialog();
            */
            //値が取得できないときの例外処理

        }
        

        private System.Drawing.Bitmap CreateGammaAdjustedImage(Bitmap img, float gammaValue)
        {
            //補正された画像の描画先となるImageオブジェクトを作成
            Bitmap newImg = new Bitmap(img.Width, img.Height);
            //newImgのGraphicsオブジェクトを取得
            Graphics g = Graphics.FromImage(newImg);

            //ImageAttributesオブジェクトの作成
            System.Drawing.Imaging.ImageAttributes ia =
                new System.Drawing.Imaging.ImageAttributes();
            //ガンマ値を設定する
            //ia.SetGamma(1);
            ia.SetGamma(1 / gammaValue);

            //ImageAttributesを使用して描画
            g.DrawImage(img,
                new System.Drawing.Rectangle(0, 0, img.Width, img.Height),
                0, 0, img.Width, img.Height, GraphicsUnit.Pixel, ia);

            //リソースを解放する
            g.Dispose();

            return newImg;
        }
        private void Button_Click_4(object sender, RoutedEventArgs e)
        {
            //ガンマ補正をする画像
            Bitmap img = new Bitmap(file.Text);
            //ガンマ値を2.0にした画像を作成する
            System.Drawing.Bitmap newImg = CreateGammaAdjustedImage(img, 2f);
            img.Dispose();
            //PictureBox1に表示
            IntPtr hbitmap = newImg.GetHbitmap();
            test2.Source = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(hbitmap, IntPtr.Zero, Int32Rect.Empty, BitmapSizeOptions.FromEmptyOptions());
            //var image = new System.Windows.Media.ImageSource();
            //System.Windows.Media.ImageSource = newImg;
 //           test2.Source = newImg;
        }

        //反転
        private void Button_Click_5(object sender, RoutedEventArgs e)
        {


            Bitmap bitmap = new Bitmap(file.Text);
            // 縦横サイズを配列から読み取り
            int w = bitmap.Width;
            int h = bitmap.Height;
            // 出力画像用の配列
            byte[,] src = new byte[w, h];
            byte[,] dst = new byte[w, h];

            // ネガポジ反転処理
            for (int i = 0; i < h; i++)
            {
                for (int j = 0; j < w; j++)
                {
 //                   src[j, i] = (byte)((bitmap.GetPixel(j, i).R + bitmap.GetPixel(j, i).B + bitmap.GetPixel(j, i).G) / 3);
                    dst[j, i] = DoubleToByte(255 - src[j, i]);
                    bitmap.SetPixel(j, i, System.Drawing.Color.FromArgb(dst[j, i], dst[j, i], dst[j, i]));
                }
            }

            // 表示
            IntPtr hbitmap = bitmap.GetHbitmap();
            test2.Source = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(hbitmap, IntPtr.Zero, Int32Rect.Empty, BitmapSizeOptions.FromEmptyOptions());
        }

        
        
        private byte DoubleToByte(int num)
        {
            if (num > 255.0) return 255;
            else if (num < 0) return 0;
            else return (byte)num;
        }


        private System.Drawing.Image AdjustContrast(System.Drawing.Image bitmap, float contrast)
        {
            //コントラストを変更した画像の描画先となるImageオブジェクトを作成
            Bitmap newImg = new Bitmap(bitmap.Width, bitmap.Height);
            //newImgのGraphicsオブジェクトを取得
            Graphics g = Graphics.FromImage(newImg);

            //ColorMatrixオブジェクトの作成
            float scale = (100f + contrast) / 100f;
            scale *= scale;
            float append = 0.5f * (1f - scale);
            System.Drawing.Imaging.ColorMatrix cm =
                new System.Drawing.Imaging.ColorMatrix(
                    new float[][] {
                new float[] {scale, 0, 0, 0, 0},
                new float[] {0, scale, 0, 0, 0},
                new float[] {0, 0, scale, 0, 0},
                new float[] {0, 0, 0, 1, 0},
                new float[] {append, append, append, 0, 1}
            });

            //ImageAttributesオブジェクトの作成
            System.Drawing.Imaging.ImageAttributes ia =
                new System.Drawing.Imaging.ImageAttributes();
            //ColorMatrixを設定する
            ia.SetColorMatrix(cm);

            //ImageAttributesを使用して描画
            g.DrawImage(bitmap,
                new System.Drawing.Rectangle(0, 0, bitmap.Width, bitmap.Height),
                0, 0, bitmap.Width, bitmap.Height, GraphicsUnit.Pixel, ia);

            //リソースを解放する
            g.Dispose();

            return newImg;
        }
        //コントラスト
        private void Button_Click_6(object sender, RoutedEventArgs e)
        {
            Bitmap bitmap = new Bitmap(file.Text);
            //コントラストを50にした画像を作成する
            System.Drawing.Image newImg = AdjustContrast(bitmap, 90);
            // 表示
            IntPtr hbitmap = bitmap.GetHbitmap();
            test2.Source = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(hbitmap, IntPtr.Zero, Int32Rect.Empty, BitmapSizeOptions.FromEmptyOptions());

        }


    }
}