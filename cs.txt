using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Drawing;
using System.Drawing.Imaging;
using OpenCvSharp;
//using OpenCvSharp.Extensions;
using Microsoft.Win32;  // オープンファイル・ダイアログボックスで使用する。
using System.IO;        // ファイル操作で使用する。
using System.Windows.Forms;
using System.Windows.Threading;//タイマー用



namespace WpfApp2
{
    /// <summary>
    /// MainWindow.xaml の相互作用ロジック
    /// </summary>
    public partial class MainWindow : System.Windows.Window
    {
        //クリックされているか判定用
        [System.Runtime.InteropServices.DllImport("user32.dll")] private static extern short GetKeyState(int nVirtkey);

        WriteableBitmap m_processedBitmap = null;
        //        BitmapImage m_srcBitmap = null;

        public MainWindow()
        {
            InitializeComponent();
            //           test.Source = new BitmapImage(new Uri("C:/Users/RD56285/Documents/1_Dev/H2O/研修/C#演習/自由製作/WpfApp2/WpfApp2/test.png", UriKind.Relative));
            //           EnableDragDrop(image);

            /*
            //タイマーの設定、一定時間ごとにマウスカーソルの状態を見る
            var timer = new DispatcherTimer(DispatcherPriority.Normal);
            //timer.Interval = new TimeSpan(100000);//ナノ秒
            timer.Interval = new TimeSpan(0, 0, 0, 0, 10);//10ミリ秒毎（0.01秒毎）
            timer.Start();
//            timer.Tick += test_MouseDown;
            */
            
        }

        /*
        //タイマーのTickイベント時
        private void Timer_Tick(object sender, EventArgs e)
        {
            System.Drawing.Point p = System.Windows.Forms.Cursor.Position;//マウスカーソル位置取得
            System.Windows.Media.Color c = GetPixelColor(p.X, p.Y);//マウスカーソル位置の色取得
            var b = new SolidColorBrush(c);
            //MyTextBlockColor.Background = b;
            //MyTextBlockColor.Text = c.ToString();
            //           MyTextBlockCursorLocation.Text = $"マウスの位置 = {System.Windows.Forms.Cursor.Position}";

            if (IsClickDown())
            {

                MyTextBlockGetColor.Background = b;
                //                MyTextBlockGetColor.Text = c.ToString();
                System.Drawing.Color ccolor = ColorTranslator.FromHtml(c.ToString());
                MyTextBlockGetColor.Text = string.Format("R:{0:d} G:{1:d} B:{2:d}", ccolor.R, ccolor.G, ccolor.B);

            }
        }
        */

        //クリック判定
        private bool IsClickDown()
        {
            //マウス左ボタン(0x01)の状態、押されていたらマイナス値(-127)、なかったら0
            return GetKeyState(0x01) < 0;
        }

        //画面上の指定座標の1ピクセルの色を返す
        private System.Windows.Media.Color GetPixelColor(int x, int y)
        {
            //1x1サイズのBitmap作成
            using (System.Drawing.Bitmap bitmap = new System.Drawing.Bitmap(
                1, 1, System.Drawing.Imaging.PixelFormat.Format32bppArgb))
            {
                using (var bmpGraphics = System.Drawing.Graphics.FromImage(bitmap))
                {
                    //画面全体をキャプチャして指定座標の1ピクセルだけBitmapにコピー
                    bmpGraphics.CopyFromScreen(x, y, 0, 0, new System.Drawing.Size(1, 1));
                    //ピクセルの色取得
                    System.Drawing.Color color = bitmap.GetPixel(0, 0);
                    //WPF用にSystem.Windows.Media.Colorに変換して返す
                    return System.Windows.Media.Color.FromArgb(color.A, color.R, color.G, color.B);
                }
            }
        }

        
        private void TextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            
        }

        



        //画像選択
        private void Button_Click_2(object sender, RoutedEventArgs e)
        {
            // オープンファイル・ダイアログボックスを設定します。
            Microsoft.Win32.OpenFileDialog dlg = new Microsoft.Win32.OpenFileDialog();
            dlg.Filter = "画像|*.jpg;*.jpeg;*.png;*.bmp";  // 左記拡張子のみフォローする。

            // ファイルを選択する
            if (dlg.ShowDialog() != true)
            {
                return;
            }

            // 選択したファイルをメモリにコピーする
            MemoryStream ms = new MemoryStream();
            using (FileStream fs = new FileStream(dlg.FileName, FileMode.Open))
                
            {
                fs.CopyTo(ms);      // FileStreamの内容をメモリストリームにコピーします。
            }
            file.Text = dlg.FileName;
            System.Windows.MessageBox.Show(file.Text);

            // ストリームの位置をリセット
            ms.Seek(0, SeekOrigin.Begin);

            // ストリームをもとにBitmapImageを作成
            BitmapImage bmp = new BitmapImage();
            bmp.BeginInit();            // BitmapImage の初期化の開始を通知します。
            bmp.StreamSource = ms;      // BitmapImage のストリーム ソースを設定します。
            bmp.EndInit();              // BitmapImage の初期化の終了を通知します。

            // BitmapImageをSourceに指定して画面に表示する
            m_processedBitmap = new WriteableBitmap(bmp);
            test.Source = m_processedBitmap;


        }

        //画像内のクリックした点の色取得
        private void test_MouseDown(object sender, MouseButtonEventArgs e)
        {
            System.Drawing.Point p = System.Windows.Forms.Cursor.Position;//マウスカーソル位置取得
            System.Windows.Media.Color c = GetPixelColor(p.X, p.Y);//マウスカーソル位置の色取得
            var r = new SolidColorBrush(c);
            var g = new SolidColorBrush(c);
            var b = new SolidColorBrush(c);
            //MyTextBlockColor.Background = b;
            //MyTextBlockColor.Text = c.ToString();
            //           MyTextBlockCursorLocation.Text = $"マウスの位置 = {System.Windows.Forms.Cursor.Position}";

            if (IsClickDown())
            {

                MyTextBlockGetColor_R.Background = r;
                MyTextBlockGetColor_G.Background = g;
                MyTextBlockGetColor_B.Background = b;
                //                MyTextBlockGetColor.Text = c.ToString();
                System.Drawing.Color ccolor = ColorTranslator.FromHtml(c.ToString());
 //               MyTextBlockGetColor_R.Text = string.Format("{0:d} G:{1:d} B:{2:d}", ccolor.R, ccolor.G, ccolor.B);
                MyTextBlockGetColor_R.Text = string.Format("{0:d}", ccolor.R);
                MyTextBlockGetColor_G.Text = string.Format("{1:d}", ccolor.G);
                MyTextBlockGetColor_B.Text = string.Format("{2:d}", ccolor.B);
            }
        }

        //画像処理
        private void Button_Click_3(object sender, RoutedEventArgs e)
        {
            WriteableBitmap m_processedBitmap_rev = m_processedBitmap;

            /*
            if (m_processedBitmap_rev == null)
            {
                System.Windows.MessageBox.Show("画像選択からやり直してください");
                return;
            }
            */

            Bitmap bitmap = new Bitmap(file.Text);
            int w = bitmap.Width;
            int h = bitmap.Height;
            byte[,] data = new byte[w, h];

            int[] R = new int[40];
            int[] G = new int[40];
            int[] B = new int[40];


 //           System.Windows.MessageBox.Show(MyTextBlockGetColor.Text);

            // bitmapクラスの画像pixel値を配列に挿入
            for (int i = 0; i < h; i++)
            {
                for (int j = 0; j < w; j++)
                {
                    //                   System.Drawing.Color ccolor = ColorTranslator.FromHtml(c.ToString());
                    ////                   MyTextBlockGetColor.Text = string.Format("R:{0:d} G:{1:d} B:{2:d}", ccolor.R, ccolor.G, ccolor.B);
                    //                   for (int a = (ccolor.R-20); a < h; a++) { 

                    
                    //}

                    // グレイスケール変換処理
                    data[j, i] = (byte)((bitmap.GetPixel(j, i).R + bitmap.GetPixel(j, i).B + bitmap.GetPixel(j, i).G)/3 );
                    bitmap.SetPixel(j, i, System.Drawing.Color.FromArgb(data[j, i], data[j, i], data[j, i]));

                    //int r = int.Parse(MyTextBlockGetColor_R.Text);
                    //int g = int.Parse(MyTextBlockGetColor_G.Text);
                    //int b = int.Parse(MyTextBlockGetColor_B.Text);

                    int r = 230;
                    int g = 230;
                    int b = 230;

                    //for (int a = (r - 20); a < (r + 20); a++) 
                    //{
                    //    for (int bb = (g - 20); bb < (g + 20); bb++)
                    //    {
                    //        for (int c = (b - 20); c < (b + 20); c++)
                    //        {
                    //            data[j, i] = 255;


                    //        }
                    //    }
                    //}
                    //bitmap.SetPixel(j, i, System.Drawing.Color.FromArgb(data[j, i], data[j, i], data[j, i]));
                }
            }
 //           System.Drawing.Color pClr = System.Drawing.Color.FromArgb(200, 200, 200);
            

            // 表示
            IntPtr hbitmap = bitmap.GetHbitmap();
            test2.Source = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(hbitmap, IntPtr.Zero, Int32Rect.Empty, BitmapSizeOptions.FromEmptyOptions());
            //           DeleteObject(hbitmap);


        }

        //「クリップボードにコピー」のボタンをクリックしたとき
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            //           MessageBox.Show("Hello World");
            System.Windows.Clipboard.SetData(System.Windows.DataFormats.Bitmap, m_processedBitmap);
            System.Windows.IDataObject data = System.Windows.Clipboard.GetDataObject();

            //値がクリップボードに格納できないときの例外処理

        }

        //「保存」のボタンをクリックしたとき
        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            // SaveFileDialogを表示
            Microsoft.Win32.SaveFileDialog saveFileDialog = new Microsoft.Win32.SaveFileDialog();
            saveFileDialog.Title = "ファイルを保存する"; // ダイアログタイトル
            saveFileDialog.InitialDirectory = @"C:\Users\RD56285\Desktop";    // 初期のディレクトリ
            saveFileDialog.FileName = @"aa.png";       // デフォルトファイル名
            saveFileDialog.ShowDialog();

            //値が取得できないときの例外処理

        }

    }
}