using System;
using System.Drawing;
using System.IO;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Drawing.Drawing2D;
using System.Windows.Forms;
using Spire.Pdf;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Windows.Controls;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace Image_processing_Ver2
{
    /// <summary>
    /// MainWindow.xaml の相互作用ロジック
    /// </summary>
    public partial class MainWindow : System.Windows.Window
    {


        //クリックされているか判定用
        [System.Runtime.InteropServices.DllImport("user32.dll")] private static extern short GetKeyState(int nVirtkey);

        public MainWindow()
        {
            InitializeComponent();
        }


        //クリック判定
        private bool IsClickDown()
        {
            //マウス左ボタン(0x01)の状態、押されていたらマイナス値(-127)、なかったら0
            return GetKeyState(0x01) < 0;
        }

        //画面上の指定座標の1ピクセルの色を返す
        private System.Windows.Media.Color GetPixelColor(int x, int y)
        {
            //1x1サイズのBitmap作成
            using (System.Drawing.Bitmap bitmap = new System.Drawing.Bitmap(
                1, 1, System.Drawing.Imaging.PixelFormat.Format32bppArgb))
            {
                using (var bmpGraphics = System.Drawing.Graphics.FromImage(bitmap))
                {
                    //画面をキャプチャして指定座標の1ピクセルだけBitmapにコピー
                    bmpGraphics.CopyFromScreen(x, y, 0, 0, new System.Drawing.Size(1, 1));
                    //ピクセルの色取得
                    System.Drawing.Color color = bitmap.GetPixel(0, 0);
                    //WPF用にSystem.Windows.Media.Colorに変換して返す
                    return System.Windows.Media.Color.FromArgb(color.A, color.R, color.G, color.B);
                }
            }
        }


        //画像選択
        private void Upload(object sender, RoutedEventArgs e)
        {
            if (test.Source != null)
            {
                reset();
            }

            // ダイアログから画像選択
            Microsoft.Win32.OpenFileDialog dlg = new Microsoft.Win32.OpenFileDialog();
            dlg.Filter = "画像|*.jpg;*.jpeg;*.png;*.bmp";  // 左記拡張子のみフォロー

            // ファイルを選択されないとき
            if (dlg.ShowDialog() != true)
            {
                return;
            }

            // 選択したファイルをメモリにコピーする
            MemoryStream ms = new MemoryStream();
            using (FileStream fs = new FileStream(dlg.FileName, FileMode.Open))
            {
                fs.CopyTo(ms);
            }
            file.Text = dlg.FileName;

            // ストリームの位置をリセット
            ms.Seek(0, SeekOrigin.Begin);

            // ストリームをもとにBitmapImageを作成
            BitmapImage bmp = new BitmapImage();
            bmp.BeginInit();            // BitmapImage の初期化の開始通知
            bmp.StreamSource = ms;      // BitmapImage のストリーム ソースを設定
            bmp.EndInit();              // BitmapImage の初期化の終了通知

            // BitmapImage→ImageSource
            test.Source = bmp;

            //reset用の画像確保
            TempSave_ori();

        }


        //クリップボードの画像を代入
        private void Button_Click_12(object sender, RoutedEventArgs e)
        {
            string username = Environment.UserName;
            if (System.Windows.Clipboard.ContainsImage())
            {
                test.Source = System.Windows.Clipboard.GetImage();

                //reset用の画像確保
                TempSave_ori();

                file.Text = @"C:/Users/" + username + "/Pictures/image/tmp_save_ori.png";

            }
            else
            {
                AutoClosingMessageBox.Show("画像がありません", "エラー", 2000);
            }
        }


        //画像内のクリックした点の色取得
        private void test_MouseDown(object sender, MouseButtonEventArgs e)
        {
            System.Drawing.Point p = System.Windows.Forms.Cursor.Position;//マウスカーソル位置取得
            System.Windows.Media.Color c = GetPixelColor(p.X, p.Y);//マウスカーソル位置の色取得
            var b = new System.Windows.Media.SolidColorBrush(c);
            MyTextBlockColor.Background = b;
            //MyTextBlockColor.Text = c.ToString();
            //MyTextBlockCursorLocation.Text = $"マウスの位置 = {System.Windows.Forms.Cursor.Position}";

            if (IsClickDown())
            {
                System.Drawing.Color ccolor = ColorTranslator.FromHtml(c.ToString());
                MyTextBlockColor.Text = string.Format("R:{0:d}, G:{1:d}, B:{2:d}", ccolor.R, ccolor.G, ccolor.B);
                MyTextBlockGetColor_R.Text = string.Format("{0:d}", ccolor.R);
                MyTextBlockGetColor_G.Text = string.Format("{0:d}", ccolor.G);
                MyTextBlockGetColor_B.Text = string.Format("{0:d}", ccolor.B);
            }
        }


        //画像処理 ボタン処理
        private void Button_Click_9(object sender, RoutedEventArgs e)
        {
            //画像未選択の場合
            if (test.Source == null)
            {
                System.Windows.MessageBox.Show("画像選択からやり直してください");
                return;
            }

            //処理前の画像
            Bitmap bitmap = new Bitmap(file.Text);

            //処理後の画像
            Bitmap newImg = null;


            //色抽出処理
            if (MyTextBlockGetColor_R.Text == "" || MyTextBlockGetColor_G.Text == "" || MyTextBlockGetColor_B.Text == "")
            {
                newImg = bitmap;
            }
            else if (MyTextBlockGetColor_R.Text != null && MyTextBlockGetColor_G.Text != null && MyTextBlockGetColor_B.Text != null)
            {
                newImg = (System.Drawing.Bitmap)ExtractColors(bitmap);
            }

            //グレースケール　2値化
            newImg = (System.Drawing.Bitmap)GrayScale(bitmap);

            //ピクセル数倍化
            newImg = (System.Drawing.Bitmap)Expand(bitmap);

            // 表示
            IntPtr hbitmap = newImg.GetHbitmap();
            test.Source = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(hbitmap, IntPtr.Zero, Int32Rect.Empty, BitmapSizeOptions.FromEmptyOptions());
        }



        //色の抽出(クリック点を白に置換)
        private System.Drawing.Image ExtractColors(Bitmap bitmap)
        {
            if (MyTextBlockGetColor_R.Text == null || MyTextBlockGetColor_G.Text == null || MyTextBlockGetColor_B.Text == null)
            {
                return bitmap;
            }

            // 縦横サイズを配列から読み取り
            int w = bitmap.Width;
            int h = bitmap.Height;
            // 出力画像用の配列
            byte[,] data1 = new byte[w, h];
            byte[,] data2 = new byte[w, h];
            byte[,] data3 = new byte[w, h];

            int conv_R = Convert.ToInt32(MyTextBlockGetColor_R.Text);
            int conv_G = Convert.ToInt32(MyTextBlockGetColor_G.Text);
            int conv_B = Convert.ToInt32(MyTextBlockGetColor_B.Text);

            // 色変換
            for (int i = 0; i < h; i++)
            {
                for (int j = 0; j < w; j++)
                {
                    data1[j, i] = (byte)((bitmap.GetPixel(j, i).R));
                    data2[j, i] = (byte)((bitmap.GetPixel(j, i).G));
                    data3[j, i] = (byte)((bitmap.GetPixel(j, i).B));

                    //クリック点の周辺色を白色に変換
                    for (int k = conv_R - 20; k <= conv_R + 20; k++)
                    {
                        int l = conv_G - 20;
                        int m = conv_B - 20;

                        if (k == data1[j, i] || l == data2[j, i] || m == data3[j, i])
                        {
                            data1[j, i] = 255;
                            data2[j, i] = 255;
                            data3[j, i] = 255;
                        }
                        l++;
                        m++;
                    }
                    bitmap.SetPixel(j, i, System.Drawing.Color.FromArgb(data1[j, i], data2[j, i], data3[j, i]));
                }
            }
            return bitmap;
        }


        //グレースケール & 2値化
        private System.Drawing.Image GrayScale(Bitmap bitmap)
        {
            int w = bitmap.Width;
            int h = bitmap.Height;
            byte[,] data = new byte[w, h];

            // bitmapクラスの画像pixel値を配列に挿入
            for (int i = 0; i < h; i++)
            {
                for (int j = 0; j < w; j++)
                {
                    // グレイスケール変換処理
                    data[j, i] = (byte)((bitmap.GetPixel(j, i).R + bitmap.GetPixel(j, i).B + bitmap.GetPixel(j, i).G) / 3);

                    /*
                    //2値化(うまく効果を得られないため一時退避中)
                    //グレイスケールで計算した値を輝度とみなし、閾値を設け2値化
                    int th = 200;//閾値
                    if (data[j, i] < th)
                    {
                        data[j, i] = 30;
                    }
                    else
                    {
                        data[j, i] =255;
                    }
                    */
                    bitmap.SetPixel(j, i, System.Drawing.Color.FromArgb(data[j, i], data[j, i], data[j, i]));
                }
            }
            return bitmap;
        }


        //拡大
        private System.Drawing.Image Expand(Bitmap bitmap)
        {
            int w = bitmap.Width * 2;
            int h = bitmap.Height * 2;

            Bitmap newbitmap = new Bitmap(w, h);
            Graphics g = Graphics.FromImage(newbitmap);

            foreach (InterpolationMode im in Enum.GetValues(typeof(InterpolationMode)))
            {
                if (im == InterpolationMode.Invalid)
                    continue;
                g.InterpolationMode = im;
                g.DrawImage(bitmap, 0, 0, w, h);
            }
            bitmap = newbitmap;

            return bitmap;
        }


        //一時保存
        private void TempSave()
        {
            //画像を作成する
            ImageSource img = test.Source;
            BitmapSource bmp = (BitmapSource)img;

            //保存場所の指定
            string username = Environment.UserName;
            string directory = @"C:/Users/" + username + "/Pictures/image";
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }
            string directory_rev = directory + "/tmp_save.png";

            //保存
            using (Stream stream = new FileStream(directory_rev, FileMode.Create))
            {
                PngBitmapEncoder encoder = new PngBitmapEncoder();
                encoder.Frames.Add(BitmapFrame.Create(bmp));
                encoder.Save(stream);
            }
        }

        //一時保存 reset用
        private void TempSave_ori()
        {
            //画像を作成する
            ImageSource img = test.Source;
            BitmapSource bmp = (BitmapSource)img;

            //保存場所の指定
            string username = Environment.UserName;
            string directory = @"C:/Users/" + username + "/Pictures/image";
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }
            string directory_rev = directory + "/tmp_save_ori.png";

            //保存
            using (Stream stream = new FileStream(directory_rev, FileMode.Create))
            {
                PngBitmapEncoder encoder = new PngBitmapEncoder();
                encoder.Frames.Add(BitmapFrame.Create(bmp));
                encoder.Save(stream);
            }
        }


        //「クリップボードにコピー」のボタンをクリックしたとき
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            //保存画像がないとき
            if (test.Source == null)
            {
                AutoClosingMessageBox.Show("コピーできる画像がありません", "エラー", 2000);
                return;
            }

            System.Windows.Clipboard.SetData(System.Windows.DataFormats.Bitmap, test.Source);
            System.Windows.IDataObject data = System.Windows.Clipboard.GetDataObject();
            AutoClosingMessageBox.Show("コピーしました", "コピー", 2000);

        }

        //「保存」のボタンをクリックしたとき
        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            //保存画像がないとき
            if (test.Source == null)
            {
                AutoClosingMessageBox.Show("保存できる画像がありません", "エラー", 2000);
                return;
            }

            //保存先確保
            string username = Environment.UserName;
            string directory = "C:\\Users\\" + username + "\\Pictures\\image";
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }

            //画像を作成
            ImageSource img = test.Source;
            BitmapSource bmp = (BitmapSource)img;

            //保存場所の指定
            Microsoft.Win32.SaveFileDialog dlg = new Microsoft.Win32.SaveFileDialog();
            dlg.AddExtension = true; //自動的に拡張子を付ける
            dlg.CheckFileExists = false; //存在しないファイルを指定したときに警告する
            dlg.CheckPathExists = true; //存在しないパスを指定したときに警告する
            dlg.CreatePrompt = false; //存在しないファイルを指定したときに作成の許可を求める
            dlg.DefaultExt = ".png"; //ダイアログに表示するファイルの拡張子。規定値はEmpty。
            dlg.DereferenceLinks = false; // ショートカットが参照先を返す場合はtrue。リンクファイルを返す場合はfalse。規定値はfalse。
            dlg.FileName = "image"; // 選択されたファイルのフルパス。
            dlg.Filter = "png(*.png)|*.png|bmp(*.bmp)|*.bmp|jpeg(*.jpeg)|*.jpeg";
            dlg.FilterIndex = 1; // 選択されたFilterのインデックス。規定値は1。
            dlg.InitialDirectory = directory; // ダイアログの初期ディレクトリ。規定値はEmpty。
            dlg.OverwritePrompt = true; // 存在するファイルを指定したときに、警告するか。規定値はtrue。
            dlg.Title = "保存するファイル名を入力してください。"; // ダイアログのタイトル。
            dlg.ValidateNames = true; // ファイル名がWin32に適合するか検査するかどうか。規定値はfalse。

            Nullable<bool> result = dlg.ShowDialog();

            if (result == true)
            {
                string imagefile = dlg.FileName;  //指定されたファイルのパス取得

                string fileExt = System.IO.Path.GetExtension(imagefile);

                //画像を作成する
                ImageSource str_img = test.Source;
                BitmapSource str_bmp = (BitmapSource)img;

                switch (fileExt)
                {
                    case ".png":
                        using (Stream stream = new FileStream(directory + "/image.png", FileMode.Create))
                        {
                            PngBitmapEncoder encoder = new PngBitmapEncoder();
                            encoder.Frames.Add(BitmapFrame.Create(bmp));
                            encoder.Save(stream);
                        }
                        break;

                    case ".jpeg":
                        using (Stream stream = new FileStream(directory + "/image.jpeg", FileMode.Create))
                        {
                            PngBitmapEncoder encoder = new PngBitmapEncoder();
                            encoder.Frames.Add(BitmapFrame.Create(bmp));
                            encoder.Save(stream);
                        }
                        break;
                    case ".bmp":
                        using (Stream stream = new FileStream(directory + "/image.bmp", FileMode.Create))
                        {
                            PngBitmapEncoder encoder = new PngBitmapEncoder();
                            encoder.Frames.Add(BitmapFrame.Create(bmp));
                            encoder.Save(stream);
                        }
                        break;
                }
            }

            // 保存ボタン以外が押下された場合
            if (result != true)
            {
                // 終了します。
                return;
            }
        }


        //文字認識 内部処理
        private void moji(string lang)
        {

            //言語ファイルの格納先（tessdataフォルダのパス）
            string datapath = "C:/Program Files/Tesseract-OCR/tessdata";

            //言語pkgがDLされてないとき
            if (!Directory.Exists(datapath))
            {
                System.Windows.Forms.MessageBox.Show("TesseractをDLしてください");
                return;
            }

            //認識する画像が入っていないとき
            if (test.Source == null)
            {
                System.Windows.Forms.MessageBox.Show("認識できる画像がありません");
                return;
            }

            //一時保存(文字認識後消去)
            TempSave();

            // 文字認識させるBitmapを作成する
            string username = Environment.UserName;
            string directory = "C:\\Users\\" + username + "\\Pictures\\image\\";
            string directory_rev = directory + "/tmp_save.png";

            Tesseract.TesseractEngine tesseOCR = new Tesseract.TesseractEngine(datapath, lang);
            Tesseract.Pix image = Tesseract.Pix.LoadFromFile(directory_rev);

            Tesseract.Page page = tesseOCR.Process(image);

            string result = page.GetText();
            TextBox.Text = result;
            ori.Text = result;

            //文字認識完了後、一時保存していた画像を消去
            File.Delete(directory_rev);
        }


        //ラジオボタンによる言語選択
        private void Button_Click_3(object sender, RoutedEventArgs e)
        {
            //英語のみ
            if (radio1.IsChecked == true)
            {
                string lang = "eng";
                moji(lang);
            }

            //日本語含む
            if (radio2.IsChecked == true)
            {
                string lang = "jpn";
                moji(lang);
            }
        }


        //文字列のクリップボードコピー
        private void Button_Click_11(object sender, RoutedEventArgs e)
        {
            string data = TextBox.Text;
            System.Windows.Clipboard.SetText(data);
            //           System.Windows.IDataObject data1 = System.Windows.Clipboard.GetDataObject();
            AutoClosingMessageBox.Show("保存しました", "保存", 2000);
        }


        //画像の拡大縮小(マウス操作)
        private void test_MouseWheel(object sender, MouseWheelEventArgs e)
        {
            // マウスホイールによる拡大縮小
            double scale = 1.7;
            Bitmap bitmap = new Bitmap(file.Text);

            var matrix = test.RenderTransform.Value;
            if (e.Delta > 0)
            {
                // 拡大処理
                matrix.ScaleAt(scale, scale, test.Width / 2, test.Height / 2);
            }
            else
            {
                // 縮小処理
                matrix.ScaleAt(1.0 / scale, 1.0 / scale, e.GetPosition(this).X, e.GetPosition(this).Y);
            }

            test.RenderTransform = new System.Windows.Media.MatrixTransform(matrix);
        }

        /*
        //左クリックを押したまま処理後の画像を平行移動できる
        //クリック点の座標取得
        private System.Windows.Point _start;
        private void test_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            test.CaptureMouse();
            _start = e.GetPosition(Border1);
        }
        //マウスを動かしたとき(平行移動)
        private void test_MouseMove(object sender, MouseEventArgs e)
        {
            if (test.IsMouseCaptured)
            {
                var matrix = test.RenderTransform.Value;

                Vector v = _start - e.GetPosition(Border1);
                matrix.Translate(-v.X, -v.Y);
                test.RenderTransform = new MatrixTransform(matrix);
                _start = e.GetPosition(Border1);
            }
        }
        */

        //解放
        private void test_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            test.ReleaseMouseCapture();
        }



        //画像リセット
        private void reset()
        {

            if (test.Source != null)
            {
                test.Source = null;
                file.Text = null;
            }
        }

        //画像処理リセット　ボタン処理
        private void reset_button(object sender, RoutedEventArgs e)
        {


            if (test.Source != null || file.Text != null)
            {
                //reset処理
                test.Source = null;
                file.Text = null;

                //画像を処理前に戻す
                string username = Environment.UserName;
                string directory = @"C:/Users/" + username + "/Pictures/image/tmp_save_ori.png";

                // 選択したファイルをメモリにコピーする
                MemoryStream ms = new MemoryStream();
                using (FileStream fs = new FileStream(directory, FileMode.Open))
                {
                    fs.CopyTo(ms);
                }

                // ストリームの位置をリセット
                ms.Seek(0, SeekOrigin.Begin);

                // ストリームをもとにBitmapImageを作成
                BitmapImage bmp = new BitmapImage();
                bmp.BeginInit();            // BitmapImage の初期化の開始通知
                bmp.StreamSource = ms;      // BitmapImage のストリーム ソースを設定
                bmp.EndInit();              // BitmapImage の初期化の終了通知

                // BitmapImage→ImageSource
                test.Source = new WriteableBitmap(bmp);
                file.Text = directory;
            }
            else
            {
                return;
            }
        }

        private void True(object sender, RoutedEventArgs e)
        {

        }



        //メッセージボックス自動クローズ
        public class AutoClosingMessageBox
        {
            System.Threading.Timer _timeoutTimer;
            string _caption;
            AutoClosingMessageBox(string text, string caption, int timeout)
            {
                _caption = caption;
                _timeoutTimer = new System.Threading.Timer(OnTimerElapsed, null, timeout, System.Threading.Timeout.Infinite);
                System.Windows.MessageBox.Show(text, caption);
            }
            public static void Show(string text, string caption, int timeout)
            {
                new AutoClosingMessageBox(text, caption, timeout);
            }
            void OnTimerElapsed(object state)
            {
                IntPtr mbWnd = FindWindow(null, _caption);
                if (mbWnd != IntPtr.Zero)
                {
                    SendMessage(mbWnd, WM_CLOSE, IntPtr.Zero, IntPtr.Zero);
                }
                _timeoutTimer.Dispose();
            }
            const int WM_CLOSE = 0x0010;
            [System.Runtime.InteropServices.DllImport("user32.dll", SetLastError = true)]
            static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
            [System.Runtime.InteropServices.DllImport("user32.dll", CharSet = System.Runtime.InteropServices.CharSet.Auto)]
            static extern IntPtr SendMessage(IntPtr hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam);
        }


        //DeepLでの翻訳
        private async void Button_Click_13(object sender, RoutedEventArgs e)
        {
            //textが空のとき
            if (ori.Text == null)
            {
                System.Windows.Forms.MessageBox.Show("翻訳できるテキストがありません");
                return;
            }

            //固有のAPIキーがあるか確認
            var win = new SubWindow();
            win.Owner = GetWindow(this);
            win.ShowDialog();

            // メッセージボックスを表示
            DialogResult result = System.Windows.Forms.MessageBox.Show("社外サイトで翻訳します。\r\n機密情報はありませんか？", "確認", MessageBoxButtons.YesNo);

            if (result == System.Windows.Forms.DialogResult.Yes)
            {

                using (var httpClient = new HttpClient())
                {
                    using (var request = new HttpRequestMessage(new HttpMethod("POST"), "https://api-free.deepl.com/v2/translate"))
                    {
                        var contentList = new List<string>();
                        contentList.Add("auth_key=ceb16ca6-0983-dc86-ef57-0bde5bfb096f:fx");

                        StringReader ori2 = new StringReader(ori.Text);
                        string ori3 = ori2.ReadLine();

                        int length = 0;
                        while (ori3 != null)
                        {
                            contentList.Add("text=" + ori3);
                            ori3 = ori2.ReadLine();
                            length++;
                        }

                        contentList.Add("target_lang=JA");

                        request.Content = new StringContent(string.Join("&", contentList));
                        request.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");

                        var response = await httpClient.SendAsync(request);
                        var resBodyStr = response.Content.ReadAsStringAsync().Result;
                        var resStatusCoode = response.StatusCode;
                        JObject deserial = (JObject)JsonConvert.DeserializeObject(resBodyStr);

                        for (int i = 0; i < length; i++)
                        {
                            tra.Text += deserial["translations"][i]["text"].ToString() + "\r\n";
                        }
                    }
                }
            }
            else if (result == System.Windows.Forms.DialogResult.No)
            {
                return;
            }
        }

        private void txtSource_TextChanged(object sender, EventArgs e)
        {
            tra.Text = "";
        }

        private void PDFUpload(object sender, RoutedEventArgs e)
        {
            // オープンファイル・ダイアログボックスを設定
            Microsoft.Win32.OpenFileDialog dlg = new Microsoft.Win32.OpenFileDialog();
            dlg.Filter = "PDF|*.pdf";

            System.Windows.Forms.OpenFileDialog ofd = new System.Windows.Forms.OpenFileDialog();
            ofd.ShowDialog();
            PDFfile.Text = ofd.FileName;
        }

        private void Button_Click_14(object sender, RoutedEventArgs e)
        {
            if (PDFfile.Text == null)
            {
                System.Windows.Forms.MessageBox.Show("変換できるファイルがありません");
                return;
            }
            string username = Environment.UserName;
            string directory = "C:\\Users\\" + username + "\\Pictures\\image\\";
            PdfDocument doc = new PdfDocument();
            doc.LoadFromFile(PDFfile.Text);

            //全変換
            if (all.IsChecked == true)
            {
                Microsoft.Win32.SaveFileDialog dlg = new Microsoft.Win32.SaveFileDialog();

                dlg.AddExtension = false; //自動的に拡張子を付ける
                dlg.DefaultExt = ".png"; //ダイアログに表示するファイルの拡張子
                dlg.FileName = "PDFimage"; // 選択されたファイルのフルパス。
                dlg.FilterIndex = 1; // 選択されたFilterのインデックス。規定値は1。
                dlg.InitialDirectory = directory; // ダイアログの初期ディレクトリ。規定値はEmpty。
                dlg.OverwritePrompt = true; // 存在するファイルを指定したときに、警告するか。規定値はtrue。
                dlg.Title = "ファイル名を入力してください。"; // ダイアログのタイトル。
                dlg.ValidateNames = true; // ファイル名がWin32に適合するか検査するかどうか。規定値はfalse。

                Nullable<bool> result = dlg.ShowDialog();

                if (result == true)
                {
                    string file = System.IO.Path.GetFileNameWithoutExtension(dlg.FileName);

                    for (int i = 0; i < doc.Pages.Count; i++)
                    {
                        //PDFをbitmapに変換します。
                        System.Drawing.Image bmp = doc.SaveAsImage(i);
                        //bitmapをpngに保存します。
                        string fileNo = string.Format("{0}_", i + 1);
                        bmp.Save(directory + fileNo + file + ".png", System.Drawing.Imaging.ImageFormat.Png);
                        //                        System.Windows.Forms.MessageBox.Show(directory+file + fileNo);

                    }
                    AutoClosingMessageBox.Show("画像出力完了", "完了", 2000);
                }
            }

            //部分変換
            if (partial.IsChecked == true)
            {
                Microsoft.Win32.SaveFileDialog dlg = new Microsoft.Win32.SaveFileDialog();

                dlg.AddExtension = false; //自動的に拡張子を付ける
                dlg.DefaultExt = ".png"; //ダイアログに表示するファイルの拡張子
                dlg.FileName = "PDFimage"; // 選択されたファイルのフルパス。
                dlg.FilterIndex = 1; // 選択されたFilterのインデックス。規定値は1。
                dlg.InitialDirectory = directory; // ダイアログの初期ディレクトリ。規定値はEmpty。
                dlg.OverwritePrompt = true; // 存在するファイルを指定したときに、警告するか。規定値はtrue。
                dlg.Title = "ファイル名を入力してください。"; // ダイアログのタイトル。
                dlg.ValidateNames = true; // ファイル名がWin32に適合するか検査するかどうか。規定値はfalse。

                Nullable<bool> result = dlg.ShowDialog();

                if (result == true)
                {
                    string file = System.IO.Path.GetFileNameWithoutExtension(dlg.FileName);
                    int page1a = Int32.Parse(page1.Text);
                    int page2a = Int32.Parse(page2.Text);
                    int flag = 0;

                    for (int i = page1a; i <= page2a; i++)
                    {
                        if (i <= 0 || i > page2a)
                        {
                            flag = 1;
                            AutoClosingMessageBox.Show("ページを指定しなおしてください", "エラー", 2000);
                            break;
                        }
                        //PDFをbitmapに変換します。
                        System.Drawing.Image bmp = doc.SaveAsImage(i - 1);
                        //bitmapをpngに保存します。
                        string fileNo = string.Format("{0}_", i);
                        bmp.Save(directory + fileNo + file + ".png", System.Drawing.Imaging.ImageFormat.Png);
                        //                        System.Windows.Forms.MessageBox.Show(directory+file + fileNo);

                    }
                    if (flag == 0)
                    {
                        AutoClosingMessageBox.Show("画像出力完了", "完了", 2000);
                    }
                }
            }

        }

        //各種処理中表示
        private void Processing()
        {
            AutoClosingMessageBox.Show("処理中…", "処理中", 2000);
        }
    }
}